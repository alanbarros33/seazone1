import pandas as pd
import streamlit as st
import plotly.express as px
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Dashboard Parceiros Seazone", layout="wide", page_icon="üìä")

# Carregar os dados
@st.cache_data
def load_data():
    try:
        df = pd.read_excel("Base.xlsx")
        
        # Pr√©-processamento
        df["Taxa Convers√£o"] = (df["Quantidade de indica√ß√µes que foram fechadas"] / 
                               df["Quantidade de indica√ß√µes de propriet√°rios"]).fillna(0)
        
        df["Taxa Qualifica√ß√£o"] = (df["Quantidade de indica√ß√µes que foram qualificadas"] / 
                                  df["Quantidade de indica√ß√µes de propriet√°rios"]).fillna(0)
        
        df["Data de √∫ltimo contato"] = pd.to_datetime(df["Data de √∫ltimo contato"])
        df["Dias sem contato"] = (pd.to_datetime("today") - df["Data de √∫ltimo contato"]).dt.days
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")
        return pd.DataFrame()

df = load_data()

# Verifica√ß√£o se os dados foram carregados
if df.empty:
    st.stop()

# Sidebar com filtros
st.sidebar.header("üîç Filtros")

# Filtros din√¢micos que s√≥ aparecem se a coluna existir
filtros = {}
if 'Cidade' in df.columns:
    filtros['Cidade'] = st.sidebar.multiselect(
        "Cidade", 
        options=df["Cidade"].unique(), 
        default=df["Cidade"].unique()
    )

if 'Canal de aquisi√ß√£o' in df.columns:
    filtros['Canal de aquisi√ß√£o'] = st.sidebar.multiselect(
        "Canal de Aquisi√ß√£o", 
        options=df["Canal de aquisi√ß√£o"].unique(), 
        default=df["Canal de aquisi√ß√£o"].unique()
    )

if 'Tipo de parceiro' in df.columns:
    filtros['Tipo de parceiro'] = st.sidebar.multiselect(
        "Tipo de Parceiro", 
        options=df["Tipo de parceiro"].unique(), 
        default=df["Tipo de parceiro"].unique()
    )

if 'Status da parceria' in df.columns:
    filtros['Status da parceria'] = st.sidebar.multiselect(
        "Status da Parceria", 
        options=df["Status da parceria"].unique(), 
        default=df["Status da parceria"].unique()
    )

# Aplicar filtros
filtro = df.copy()
for col, valores in filtros.items():
    if valores and col in filtro.columns:
        filtro = filtro[filtro[col].isin(valores)]

# Layout principal
st.title("üìä Dashboard de Performance de Parceiros - Seazone")
st.markdown("""
**Objetivo:** Otimizar a aquisi√ß√£o de im√≥veis por meio de parcerias com imobili√°rias locais, 
identificando os melhores parceiros e canais de aquisi√ß√£o.
""")

# M√©tricas principais
st.subheader("üìà M√©tricas Gerais")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total de Parceiros", filtro.shape[0])
col2.metric("Taxa M√©dia de Convers√£o", f"{filtro['Taxa Convers√£o'].mean():.1%}")
col3.metric("Taxa M√©dia de Qualifica√ß√£o", f"{filtro['Taxa Qualifica√ß√£o'].mean():.1%}")
col4.metric("NPS M√©dio", f"{filtro['NPS da √∫ltima intera√ß√£o'].mean():.1f}" if 'NPS da √∫ltima intera√ß√£o' in filtro.columns else "N/D")

# Se√ß√£o 1: Ranking de Parceiros
st.subheader("üèÜ Ranking dos Melhores Parceiros por Taxa de Convers√£o")
st.markdown("""
**An√°lise:** Identifica quais parceiros t√™m o melhor desempenho em converter indica√ß√µes em fechamentos.
A taxa √© calculada como: (Indica√ß√µes Fechadas / Indica√ß√µes Recebidas).
""")

top_parceiros = filtro.sort_values("Taxa Convers√£o", ascending=False).head(10)
fig1 = px.bar(
    top_parceiros,
    x="Nome do Parceiro",
    y="Taxa Convers√£o",
    color="Taxa Convers√£o",
    text_auto=".1%",
    color_continuous_scale="Blues",
    labels={"Taxa Convers√£o": "Taxa de Convers√£o (%)"},
    height=400
)
fig1.update_layout(yaxis_tickformat=".0%")
st.plotly_chart(fig1, use_container_width=True)

# Se√ß√£o 2: Canais de Aquisi√ß√£o
st.subheader("üõí Desempenho por Canal de Aquisi√ß√£o")
st.markdown("""
**An√°lise:** Compara a efici√™ncia dos diferentes canais de aquisi√ß√£o de parceiros.
O melhor canal √© aquele com maior taxa m√©dia de convers√£o.
""")

if 'Canal de aquisi√ß√£o' in filtro.columns:
    canal_conv = filtro.groupby("Canal de aquisi√ß√£o").agg({
        "Taxa Convers√£o": "mean",
        "Nome do Parceiro": "count"
    }).rename(columns={
        "Taxa Convers√£o": "Taxa M√©dia de Convers√£o",
        "Nome do Parceiro": "Quantidade de Parceiros"
    }).sort_values("Taxa M√©dia de Convers√£o", ascending=False).reset_index()

    fig2 = px.bar(
        canal_conv,
        x="Canal de aquisi√ß√£o",
        y="Taxa M√©dia de Convers√£o",
        color="Taxa M√©dia de Convers√£o",
        text_auto=".1%",
        color_continuous_scale="Greens",
        labels={"Taxa M√©dia de Convers√£o": "Taxa de Convers√£o (%)"},
        height=400
    )
    fig2.update_layout(yaxis_tickformat=".0%")
    st.plotly_chart(fig2, use_container_width=True)
    
    melhor_canal = canal_conv.iloc[0]
    st.success(f"‚úÖ **Melhor canal de aquisi√ß√£o:** {melhor_canal['Canal de aquisi√ß√£o']} "
              f"com taxa de convers√£o de {melhor_canal['Taxa M√©dia de Convers√£o']:.1%}")
else:
    st.warning("Dados sobre canais de aquisi√ß√£o n√£o dispon√≠veis")

# Se√ß√£o 3: Risco de Churn (ATUALIZADA)
st.subheader("‚ö†Ô∏è Parceiros com Risco de Churn")
st.markdown("""
**Crit√©rios de identifica√ß√£o:**
- Parceria inativa
- NPS da √∫ltima intera√ß√£o baixo (<30)
- Mais de 60 dias sem contato
- Taxa de convers√£o abaixo de 20%
""")

if all(col in filtro.columns for col in ["Status da parceria", "NPS da √∫ltima intera√ß√£o", "Dias sem contato", "Taxa Convers√£o"]):
    filtro["Risco Churn"] = (
        (filtro["Status da parceria"] == "Inativo") |
        (filtro["NPS da √∫ltima intera√ß√£o"] < 30) |
        (filtro["Dias sem contato"] > 60) |
        (filtro["Taxa Convers√£o"] < 0.2)
    )
    
    risco_churn = filtro[filtro["Risco Churn"]].sort_values("Dias sem contato", ascending=False)
    
    if not risco_churn.empty:
        fig3 = px.scatter(
            risco_churn,
            x="Dias sem contato",
            y="NPS da √∫ltima intera√ß√£o",
            size="Quantidade de indica√ß√µes de propriet√°rios",
            color="Taxa Convers√£o",
            hover_name="Nome do Parceiro",
            color_continuous_scale="Reds",
            labels={
                "Dias sem contato": "Dias Sem Contato",
                "NPS da √∫ltima intera√ß√£o": "NPS (0-100)",
                "Taxa Convers√£o": "Taxa de Convers√£o"
            },
            height=500
        )
        fig3.update_layout(yaxis_range=[0,100])
        st.plotly_chart(fig3, use_container_width=True)
        
        st.warning(f"üö® **Total de parceiros em risco:** {risco_churn.shape[0]}")
        st.dataframe(risco_churn[["Nome do Parceiro", "Cidade", "Status da parceria", 
                                 "Dias sem contato", "NPS da √∫ltima intera√ß√£o", "Taxa Convers√£o"]].sort_values("Dias sem contato", ascending=False))
    else:
        st.success("üéâ Nenhum parceiro identificado com risco de churn!")
else:
    st.error("Dados incompletos para an√°lise de risco de churn")

# Se√ß√£o 4: Perfil Ideal do Parceiro
st.subheader("üíé Perfil Ideal do Parceiro")
st.markdown("""
**Caracter√≠sticas identificadas na base:**
""")

if not filtro.empty:
    perfil_ideal = {
        "Taxa de Convers√£o": f"> {filtro['Taxa Convers√£o'].quantile(0.75):.1%}",
        "NPS da √∫ltima intera√ß√£o": f"> {filtro['NPS da √∫ltima intera√ß√£o'].quantile(0.75):.1f}" if 'NPS da √∫ltima intera√ß√£o' in filtro.columns else "N/D",
        "Frequ√™ncia de Indica√ß√£o": "Ativos nos √∫ltimos 30 dias",
        "Canal de Aquisi√ß√£o": melhor_canal['Canal de aquisi√ß√£o'] if 'Canal de aquisi√ß√£o' in filtro.columns else "N/D"
    }
    
    st.table(pd.DataFrame.from_dict(perfil_ideal, orient='index', columns=["Valor Ideal"]))
    
    st.markdown("""
    **A√ß√µes recomendadas:**
    1. Focar aquisi√ß√£o no canal de melhor performance
    2. Criar programa de incentivos para parceiros com caracter√≠sticas ideais
    3. Desenvolver plano de reten√ß√£o para parceiros em risco
    """)
else:
    st.warning("N√£o h√° dados suficientes para determinar o perfil ideal")

# Tabela completa (opcional)
expander = st.expander("üîç Visualizar todos os dados filtrados")
with expander:
    st.dataframe(filtro.sort_values("Taxa Convers√£o", ascending=False))